#lang racket

(define (A x y)
    (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
            (A x (- y 1))))))

(A 1 10)
; 1024
(A 2 4)
;65536
(A 3 3)
;65536

(define (f n) (A 0 n))
; (f n) computes f * 2

(define (g n) (A 1 n))
; (g n) computes 2 ^ n

(define (h n) (A 2 n))
; クヌースの矢印記号でのテトレーションを^^で表すとすると
; 2 ^^ n

(define (k n) (* 5 n n))

; 以下、考えるのに展開したやつ
; (A 1 n)
; (A (- 1 1) (A 1 (- n 1)))
; (A 0 (A 1 (- n 1)))
; (* 2 (A 1 (- n 1)))
; (* 2 (A (- 1 1) (A 1 (- (- n 1) 1))))
; (* 2 (* 2 (A 1 (- (- n 1) 1))))
; (* 2 (* 2 ... (A 1 1) ... ))
; (* 2 (* 2 ... (2) ... ))
; ... ((* 2)がn回出てくる) 
; 2 ^ n
;
; (A 2 n)
; (A (- 2 1) (A 2 (- n 1)))
; (A 1 (A 2 (- n 1)))
; (A (- 1 1) (A 1 (- (A 2 (- n 1)) 1)))
; (A 0 (A 1 (- (A 2 (- n 1)) 1)))
; (* 2 (A 1 (- (A 2 (- n 1)) 1)))
; (* 2 (A 1 (- (A 2 (- n 1)) 1)))
;
; (A 2 1)
; 2
;
; (A 2 2)
; (A (- 2 1) (A 2 (- 2 1)))
; (A 1 (A 2 1))
; (A 1 2)
; 2 ^ 2
;
; (A 2 3)
; (A (- 2 1) (A 2 (- 3 1)))
; (A 1 (A 2 2))
; (A 1 (A (- 2 1) (A 2 (- 2 1))))
; (A 1 (A 1 (A 2 1)))
; (A 1 (A 1 2))
; (A 1 (^ 2 2))
; (^ 2 (^ 2 2))
; 2 ^ 2 ^ 2
;
; (A 2 n)
; (A (- 2 1) (A 2 (- n 1)))
; (A 1 (A 2 (- n 1)))
; (A 1 (A (- 2 1) (A 2 (- (- n 1) 1))))
; (A 1 (A 1 (A 2 (- (- n 1) 1))))
; (A 1 (A 1 (A (- 2 1) (A 2 (- (- (- n 1) 1) 1)))))
; (A 1 (A 1 (A 1 ... (2) ... )))
; (A 1) がn回出てくる
; (A 1 (A 2 n-1))
; クヌースの矢印記号でのテトレーションを^^で表すとすると
;  2 ^^ n
;   
;
